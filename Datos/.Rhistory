"surface_covered" = "Superficie Cubierta",
"rooms" = "Habitaciones",
"bathrooms" = "Baños",
"bedrooms" = "Dormitorios",
"price" = "Precio",
"lat" = "Latitud",
"lon" = "Longitud"
)) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))
#Tablas de porcentajes de missing
db_miss <- skim(train) %>% dplyr::select(skim_variable, n_missing)
Nobs= nrow(train)
db_miss<- db_miss %>% filter(n_missing!= 0)
db_miss<- db_miss %>% mutate(p_missing= n_missing/Nobs) %>% arrange(-n_missing)
db_miss
#Base de testeo ----------------------------------------------------------------
#Graficas de missings
#Forma 1
vis_dat(test) +
scale_fill_manual(
name = "Tipo de dato", # Cambiar el nombre de la leyenda aquí
values = c(
"character" = "#B0C4DE", # Azul claro
"integer" = "#87CEEB",  # Azul cielo
"numeric" = "#4682B4",  # Azul acero
"NA" = "#D3D3D3"       # Gris claro
))
#Forma 2
vis_dat(test) +
scale_fill_manual(
name = "Tipo de dato", # Cambiar el nombre de la leyenda aquí
values = c(
"character" = "#B0C4DE", # Azul claro
"integer" = "#87CEEB",  # Azul cielo
"numeric" = "#4682B4",  # Azul acero
"NA" = "#D3D3D3"       # Gris claro
))  +
labs(
fill = "Tipo de dato",
x = NULL,
y = "Observaciones"
) +
scale_x_discrete(labels = c(
"property_id" = "ID Propiedad",
"city" = "Ciudad",
"property_type" = "Tipo Propiedad",
"operation_type" = "Tipo Operación",
"title" = "Título",
"description" = "Descripción",
"month" = "Mes",
"year" = "Año",
"surface_total" = "Superficie Total",
"surface_covered" = "Superficie Cubierta",
"rooms" = "Habitaciones",
"bathrooms" = "Baños",
"bedrooms" = "Dormitorios",
"price" = "Precio",
"lat" = "Latitud",
"lon" = "Longitud"
)) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))
#Tabla de missings
db_miss_test <- skim(test) %>% dplyr::select(skim_variable, n_missing)
Nobs= nrow(train)
db_miss_test<- db_miss_test %>% filter(n_missing!= 0)
db_miss_test<- db_miss_test %>% mutate(p_missing= n_missing/Nobs) %>% arrange(-n_missing)
db_miss_test
#-------------------------------------------------------------------------------
# 4. Tratamiento de los missings -----------------------------------------------
#-------------------------------------------------------------------------------
#Base de entrenamiento ----------------
##.Imputaciones moda en las variables: rooms,bathrooms y bedrooms por tipo de propiedad
sapply(train[, c("rooms", "bathrooms", "bedrooms")], class) #Tipo de variable
train <- train %>%
group_by(property_type) %>%
mutate(
rooms_imp = ifelse(is.na(rooms), as.numeric(mlv(rooms, method = "mfv", na.rm = TRUE)), rooms),
bathrooms_imp = ifelse(is.na(bathrooms), as.numeric(mlv(bathrooms, method = "mfv", na.rm = TRUE)), bathrooms),
bedrooms_imp = ifelse(is.na(bedrooms), as.numeric(mlv(bedrooms, method = "mfv", na.rm = TRUE)), bedrooms)
) %>%
ungroup()
##. Imputacion media y mediana por tipo de propiedad de las variables: surface_total y surface_covered
#Imputacion media
train <- train %>%
group_by(property_type) %>%
mutate(
surface_total_imp_mean = ifelse(is.na(surface_total), mean(surface_total, na.rm = TRUE), surface_total),
surface_covered_imp_mean = ifelse(is.na(surface_covered), mean(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
#Imputacion mediana
train <- train %>%
group_by(property_type) %>%
mutate(
surface_total_median = ifelse(is.na(surface_total), median(surface_total, na.rm = TRUE), surface_total),
surface_covered_median = ifelse(is.na(surface_covered), median(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
#Base de testeo ----------------
##.Imputaciones moda en las variables: rooms,bathrooms y bedrooms por tipo de propiedad
test <- test %>%
group_by(property_type) %>%
mutate(
rooms_imp = ifelse(is.na(rooms), as.numeric(mlv(rooms, method = "mfv", na.rm = TRUE)), rooms),
bathrooms_imp = ifelse(is.na(bathrooms), as.numeric(mlv(bathrooms, method = "mfv", na.rm = TRUE)), bathrooms),
bedrooms_imp = ifelse(is.na(bedrooms), as.numeric(mlv(bedrooms, method = "mfv", na.rm = TRUE)), bedrooms)
) %>%
ungroup()
## Imputación media y mediana por tipo de propiedad de las variables: surface_total y surface_covered
# Imputación media
test <- test %>%
group_by(property_type) %>%
mutate(
surface_total_imp_mean = ifelse(is.na(surface_total), mean(surface_total, na.rm = TRUE), surface_total),
surface_covered_imp_mean = ifelse(is.na(surface_covered), mean(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
# Imputación mediana
test <- test %>%
group_by(property_type) %>%
mutate(
surface_total_median = ifelse(is.na(surface_total), median(surface_total, na.rm = TRUE), surface_total),
surface_covered_median = ifelse(is.na(surface_covered), median(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
train <- as.data.frame(train)
test <- as.data.frame(test)
#-------------------------------------------------------------------------------
# 5. Mirar distribuciones de las variables numericas----------------------------
#-------------------------------------------------------------------------------
#Mirar distribuciones de variables numericas
stargazer(train)
stargazer(train,type="text")
#-------------------------------------------------------------------------------
# 6. Creacion de variables -----------------------------------------------------
#-------------------------------------------------------------------------------
#Transformacion a logaritmo
train$Log_precio <- log(train$price)
summary(train$price)
# precio x metro cuadrado
train <- train %>%
mutate(precio_mt2 = round(price/surface_total_median,0))%>%
mutate(precio_mt2 = precio_mt2/1000000)  # precio x Mt2 en millones
summary(train$precio_mt2)
# estadísticas descriptivas
stargazer(train)
stargazer(train,type="text")
# Histograma ----------------------------------------------------
#Densidad
hist((train$price / 1000000), probability = TRUE, col = '#A6CFE2', border = "grey30", breaks = 25,
xlab = "Precio (millones)", main = "Distribución del Precio (en millones)")
abline(v = mean((train$price / 1000000)), col = 'red', lwd = 3, lty = 2)
lines(density((train$price / 1000000)), col = '#00008B', lwd = 3)
legend("topright", legend = c("Media", "Densidad"), col = c("red", "#00008B"), lty = c(2, 1), lwd = 3, bty = "n")
# Frecuencia
p <- ggplot(train, aes(x = price/ 1000000)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Precio", y = "Cantidad") +
theme_bw()
#Frecuencias por tipo de propiedad
media_apto <- mean((train$price[train$property_type == "Apartamento"])/1000000)
media_casa <- mean((train$price[train$property_type == "Casa"])/1000000)
ggplot(train, aes(x = (price/1000000), fill = property_type)) +
geom_histogram(color="white", alpha = 0.6, position = 'identity', binwidth = 50) +
geom_vline(aes(xintercept = media_apto), color = "darkgreen", linetype = "dashed")+
geom_vline(aes(xintercept = media_casa), color = "darkorange3", linetype = "dashed")+
labs(x = 'Precio de Viviendas (Millones)', y ="Frecuencia")+
scale_fill_manual(values=c("cadetblue4", "darkorange"))+
guides(fill = guide_legend(title = "Inmueble"))+
facet_wrap(~property_type)
#-------------------------------------------------------------------------------
# 7. Datos espaciales ----------------------------------------------------------
#-------------------------------------------------------------------------------
# Verificar la cantidad de valores NA en lon y lat (No hay NA)
sum(is.na(train$lon))  # Número de NA en la columna lon
sum(is.na(train$lat))  # Número de NA en la columna lat
# Observamos la primera visualización
##. primera visualización de datos (train)
leaflet() %>% #Mirar mapa
addTiles() %>%
addCircles(lng = train$lon, #Longitud
lat = train$lat) #Latitud
names(train)
##. primera visualización de datos (test)
leaflet() %>%
addTiles() %>%
addCircles(lng = test$lon,
lat = test$lat)
setwd(paste0(wd,"\Datos espaciales\Localidades")) #Directorio datos
setwd(paste0(wd,"\Datos espaciales\Localidades")) #Directorio datos
setwd(paste0(wd,"\Datos espaciales","\Localidades")) #Directorio datos
setwd(paste0(wd,"Datos espaciales","\Localidades")) #Directorio datos
setwd()
#------------------------------------------------------------------------------#
#------------------------ CODIGO BASE - PROBLEM SET 3 -------------------------#
#------------------------------------------------------------------------------#
# El presente codigo permite:
# 1: Cambiar el directorio entre cada uno de los colaboradores del proyecto
# 2: Correr cada uno de los scripts utilizados en la resolucion del Problem set 2.
# 0. Se borra la memoria y se cargan los paquetes ------------------------------
rm(list = ls())   # Borra la memoria
# Se cargan los paquetes de interes
library(pacman)
p_load(
# Funciones básicas para manejo y análisis de datos
arrow,         # Lectura y escritura de datos en formatos eficientes como Apache Parquet y Feather
sfheaders,     # Manipulación eficiente de objetos espaciales 'sf' en R
VIM,           # Manejo y visualización de valores faltantes en datasets
tidyverse,     # Colección de paquetes para manipulación de datos (dplyr, ggplot2, tidyr, etc.)
janitor,       # Limpieza y organización de datos (e.g., nombres de columnas, tablas cruzadas)
here,          # Gestión de rutas relativas para proyectos en R
rio,           # Importación y exportación sencilla de archivos (CSV, Excel, SPSS, etc.)
stringi,       # Manipulación avanzada de cadenas de texto
readr,         # Lectura rápida de archivos de texto y CSV
skimr,         # Resúmenes estadísticos rápidos y detallados de datasets
stargazer,
# Paquetes para manejo de datos espaciales
sf,            # Manejo y análisis de datos espaciales en formato simple (e.g., shapefiles, GeoJSON)
leaflet,       # Visualización interactiva de mapas en R
spatialsample, # Creación de muestras espaciales para análisis y modelado
osmdata,       # Obtención de datos geoespaciales de OpenStreetMap (OSM)
tmaptools,     # Herramientas de apoyo para crear mapas con 'tmap'
caret,         # Conjunto de herramientas para entrenamiento y evaluación de modelos predictivos
# Paquetes de aprendizaje automático (Machine Learning)
tidymodels,    # Framework para construir y evaluar modelos de machine learning en un entorno 'tidy'
xgboost,       # Algoritmo de gradient boosting optimizado para tareas de clasificación y regresión
gbm,           # Modelado de boosting basado en árboles de decisión (Gradient Boosting Machines)
SuperLearner,   # Meta-modelo para combinar múltiples algoritmos de machine learning y mejorar la predicción
#Redes neuronales
nnet, # redes neuronales de una sola capa
Brulee, # Redes neuronales mas complejas
skimr,     # datos de resumen
visdat,    # visualizacion de datos faltantes
corrplot,  # graficos de correlacion
stargazer, # tablas/salida a TEX.
modeest,   #Moda
)
# 1. Definicion del directorio -------------------------------------------------
ifelse(grepl("Usuario", getwd()), # Diego
wd <- "C:\\Users\\Usuario\\OneDrive - Universidad de los andes\\Documentos\\GitHub\\Problem-Set-3-Machine-Learning_2024",
ifelse(grepl("Usuario", getwd()), # Julieth1
wd <- "C:\\Users\\Usuario\\OneDrive - Universidad de los andes\\Escritorio\\Taller 2 Big data",
ifelse(grepl("hncar", getwd()),
wd <- "C:\\Users\\hncar\\Documents\\GitHub\\Problem-Set-2_Machine-Learning_2024",
ifelse(grepl("C:\\Users\\User", getwd()),  # Henry
wd <- "C:\\Users\\User\\OneDrive - Universidad de los Andes\\Big Data y Machine Learning\\Problem_set_1\\Problem_set_1",
ifelse(grepl("\\\\Users\\\\aleja\\\\", getwd()),
wd <- "Directorio",  # Jorge
ifelse(grepl("Steven Ramirez", getwd()),
wd <- "C:/Users/Steven Ramirez/Downloads/Problem-Set-2_Machine-Learning_2024/Problem-Set-2_Machine-Learning_2024",
"otro_directorio"))))))
setwd()
ed
w
wd
#------------------------------------------------------------------------------#
#---------------------- LIMPIEZA DATA - PROBLEM SET 3 -------------------------#
#------------------------------------------------------------------------------#
#-------------------------------------------------------------------------------
# 1. Cargar base de datos de entrenamiento y testeo ----------------------------
#-------------------------------------------------------------------------------
setwd(paste0(wd,"/Datos")) #Directorio datos
### Base de datos de entrenamiento
train <- import("train.csv")
length(train) # 16 variables
nrow(train) #38.644 observaciones
### Base de datos de testeo
test <- import("test.csv") # Base de testeo
length(test) # 16 variables
nrow(test) #10.286 observaciones
#-------------------------------------------------------------------------------
# 2. Mirar las variables que contiene cada base  -------------------------------
#-------------------------------------------------------------------------------
#Base de entrenamiento
names(train)
str(train)
table(train$property_type) #Solo hay apartamentos y casas
table(train$city) #Solo Bogota
table(train$operation_type) #Solo venta
#Base de test
names(test)
str(test)  # variables de precio está en NA
table(test$property_type) #Solo hay apartamentos y casas
table(test$city) #Solo Bogota
table(test$operation_type) #Solo venta
#-------------------------------------------------------------------------------
# 3. Revisar missings de las variables   ---------------------------------------
#-------------------------------------------------------------------------------
#Base de entrenamiento -----------------------------------------------------
#Grafica de missings
#Forma 1
vis_dat(train) +
scale_fill_manual(values = c(
"character" = "#B0C4DE", # Azul claro
"integer" = "#87CEEB",  # Azul cielo
"numeric" = "#4682B4",  # Azul acero
"NA" = "#D3D3D3"       # Gris claro
))
#Forma 2
vis_dat(train) +
scale_fill_manual(values = c(
"character" = "#B0C4DE", # Azul claro
"integer" = "#87CEEB",  # Azul cielo
"numeric" = "#4682B4",  # Azul acero
"NA" = "#D3D3D3"       # Gris claro
))   +
labs(
fill = "Tipo de dato",
x = NULL,
y = "Observaciones"
) +
scale_x_discrete(labels = c(
"property_id" = "ID Propiedad",
"city" = "Ciudad",
"property_type" = "Tipo Propiedad",
"operation_type" = "Tipo Operación",
"title" = "Título",
"description" = "Descripción",
"month" = "Mes",
"year" = "Año",
"surface_total" = "Superficie Total",
"surface_covered" = "Superficie Cubierta",
"rooms" = "Habitaciones",
"bathrooms" = "Baños",
"bedrooms" = "Dormitorios",
"price" = "Precio",
"lat" = "Latitud",
"lon" = "Longitud"
)) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))
#Tablas de porcentajes de missing
db_miss <- skim(train) %>% dplyr::select(skim_variable, n_missing)
Nobs= nrow(train)
db_miss<- db_miss %>% filter(n_missing!= 0)
db_miss<- db_miss %>% mutate(p_missing= n_missing/Nobs) %>% arrange(-n_missing)
db_miss
#Base de testeo ----------------------------------------------------------------
#Graficas de missings
#Forma 1
vis_dat(test) +
scale_fill_manual(
name = "Tipo de dato", # Cambiar el nombre de la leyenda aquí
values = c(
"character" = "#B0C4DE", # Azul claro
"integer" = "#87CEEB",  # Azul cielo
"numeric" = "#4682B4",  # Azul acero
"NA" = "#D3D3D3"       # Gris claro
))
#Forma 2
vis_dat(test) +
scale_fill_manual(
name = "Tipo de dato", # Cambiar el nombre de la leyenda aquí
values = c(
"character" = "#B0C4DE", # Azul claro
"integer" = "#87CEEB",  # Azul cielo
"numeric" = "#4682B4",  # Azul acero
"NA" = "#D3D3D3"       # Gris claro
))  +
labs(
fill = "Tipo de dato",
x = NULL,
y = "Observaciones"
) +
scale_x_discrete(labels = c(
"property_id" = "ID Propiedad",
"city" = "Ciudad",
"property_type" = "Tipo Propiedad",
"operation_type" = "Tipo Operación",
"title" = "Título",
"description" = "Descripción",
"month" = "Mes",
"year" = "Año",
"surface_total" = "Superficie Total",
"surface_covered" = "Superficie Cubierta",
"rooms" = "Habitaciones",
"bathrooms" = "Baños",
"bedrooms" = "Dormitorios",
"price" = "Precio",
"lat" = "Latitud",
"lon" = "Longitud"
)) +
theme(axis.text.x = element_text(angle = 90, hjust = 0.5, vjust = 0.5))
#Tabla de missings
db_miss_test <- skim(test) %>% dplyr::select(skim_variable, n_missing)
Nobs= nrow(train)
db_miss_test<- db_miss_test %>% filter(n_missing!= 0)
db_miss_test<- db_miss_test %>% mutate(p_missing= n_missing/Nobs) %>% arrange(-n_missing)
db_miss_test
#-------------------------------------------------------------------------------
# 4. Tratamiento de los missings -----------------------------------------------
#-------------------------------------------------------------------------------
#Base de entrenamiento ----------------
##.Imputaciones moda en las variables: rooms,bathrooms y bedrooms por tipo de propiedad
sapply(train[, c("rooms", "bathrooms", "bedrooms")], class) #Tipo de variable
train <- train %>%
group_by(property_type) %>%
mutate(
rooms_imp = ifelse(is.na(rooms), as.numeric(mlv(rooms, method = "mfv", na.rm = TRUE)), rooms),
bathrooms_imp = ifelse(is.na(bathrooms), as.numeric(mlv(bathrooms, method = "mfv", na.rm = TRUE)), bathrooms),
bedrooms_imp = ifelse(is.na(bedrooms), as.numeric(mlv(bedrooms, method = "mfv", na.rm = TRUE)), bedrooms)
) %>%
ungroup()
##. Imputacion media y mediana por tipo de propiedad de las variables: surface_total y surface_covered
#Imputacion media
train <- train %>%
group_by(property_type) %>%
mutate(
surface_total_imp_mean = ifelse(is.na(surface_total), mean(surface_total, na.rm = TRUE), surface_total),
surface_covered_imp_mean = ifelse(is.na(surface_covered), mean(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
#Imputacion mediana
train <- train %>%
group_by(property_type) %>%
mutate(
surface_total_median = ifelse(is.na(surface_total), median(surface_total, na.rm = TRUE), surface_total),
surface_covered_median = ifelse(is.na(surface_covered), median(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
#Base de testeo ----------------
##.Imputaciones moda en las variables: rooms,bathrooms y bedrooms por tipo de propiedad
test <- test %>%
group_by(property_type) %>%
mutate(
rooms_imp = ifelse(is.na(rooms), as.numeric(mlv(rooms, method = "mfv", na.rm = TRUE)), rooms),
bathrooms_imp = ifelse(is.na(bathrooms), as.numeric(mlv(bathrooms, method = "mfv", na.rm = TRUE)), bathrooms),
bedrooms_imp = ifelse(is.na(bedrooms), as.numeric(mlv(bedrooms, method = "mfv", na.rm = TRUE)), bedrooms)
) %>%
ungroup()
## Imputación media y mediana por tipo de propiedad de las variables: surface_total y surface_covered
# Imputación media
test <- test %>%
group_by(property_type) %>%
mutate(
surface_total_imp_mean = ifelse(is.na(surface_total), mean(surface_total, na.rm = TRUE), surface_total),
surface_covered_imp_mean = ifelse(is.na(surface_covered), mean(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
# Imputación mediana
test <- test %>%
group_by(property_type) %>%
mutate(
surface_total_median = ifelse(is.na(surface_total), median(surface_total, na.rm = TRUE), surface_total),
surface_covered_median = ifelse(is.na(surface_covered), median(surface_covered, na.rm = TRUE), surface_covered)
) %>%
ungroup()
train <- as.data.frame(train)
test <- as.data.frame(test)
#-------------------------------------------------------------------------------
# 5. Mirar distribuciones de las variables numericas----------------------------
#-------------------------------------------------------------------------------
#Mirar distribuciones de variables numericas
stargazer(train)
stargazer(train,type="text")
#-------------------------------------------------------------------------------
# 6. Creacion de variables -----------------------------------------------------
#-------------------------------------------------------------------------------
#Transformacion a logaritmo
train$Log_precio <- log(train$price)
summary(train$price)
# precio x metro cuadrado
train <- train %>%
mutate(precio_mt2 = round(price/surface_total_median,0))%>%
mutate(precio_mt2 = precio_mt2/1000000)  # precio x Mt2 en millones
summary(train$precio_mt2)
# estadísticas descriptivas
stargazer(train)
stargazer(train,type="text")
# Histograma ----------------------------------------------------
#Densidad
hist((train$price / 1000000), probability = TRUE, col = '#A6CFE2', border = "grey30", breaks = 25,
xlab = "Precio (millones)", main = "Distribución del Precio (en millones)")
abline(v = mean((train$price / 1000000)), col = 'red', lwd = 3, lty = 2)
lines(density((train$price / 1000000)), col = '#00008B', lwd = 3)
legend("topright", legend = c("Media", "Densidad"), col = c("red", "#00008B"), lty = c(2, 1), lwd = 3, bty = "n")
# Frecuencia
p <- ggplot(train, aes(x = price/ 1000000)) +
geom_histogram(fill = "darkblue", alpha = 0.4) +
labs(x = "Precio", y = "Cantidad") +
theme_bw()
#Frecuencias por tipo de propiedad
media_apto <- mean((train$price[train$property_type == "Apartamento"])/1000000)
media_casa <- mean((train$price[train$property_type == "Casa"])/1000000)
ggplot(train, aes(x = (price/1000000), fill = property_type)) +
geom_histogram(color="white", alpha = 0.6, position = 'identity', binwidth = 50) +
geom_vline(aes(xintercept = media_apto), color = "darkgreen", linetype = "dashed")+
geom_vline(aes(xintercept = media_casa), color = "darkorange3", linetype = "dashed")+
labs(x = 'Precio de Viviendas (Millones)', y ="Frecuencia")+
scale_fill_manual(values=c("cadetblue4", "darkorange"))+
guides(fill = guide_legend(title = "Inmueble"))+
facet_wrap(~property_type)
#-------------------------------------------------------------------------------
# 7. Datos espaciales ----------------------------------------------------------
#-------------------------------------------------------------------------------
# Verificar la cantidad de valores NA en lon y lat (No hay NA)
sum(is.na(train$lon))  # Número de NA en la columna lon
sum(is.na(train$lat))  # Número de NA en la columna lat
# Observamos la primera visualización
##. primera visualización de datos (train)
leaflet() %>% #Mirar mapa
addTiles() %>%
addCircles(lng = train$lon, #Longitud
lat = train$lat) #Latitud
names(train)
##. primera visualización de datos (test)
leaflet() %>%
addTiles() %>%
addCircles(lng = test$lon,
lat = test$lat)
setwd(paste0(wd,"Datos espaciales\Localidades")) #Directorio datos
setwd(paste0(wd, "Datos espaciales\\Localidades")) #Directorio datos
setwd(paste0(wd, "\Datos espaciales\\Localidades")) #Directorio datos
